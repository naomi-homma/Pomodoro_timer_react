{"version":3,"sources":["components/Header.jsx","components/Countdown.jsx","lib/time.js","containers/Countdown.jsx","components/userInput.jsx","containers/UserInput.jsx","components/InputTimeDesplay.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Styledheader","styled","header","Header","StyledTimeDesplay","div","StyledButton","Button","CountdownComponent","leftSec","handleStart","handleStop","handleReset","active","sec","remainigTime","restMin","String","Math","floor","padStart","restSec","secToMMSS","className","variant","onClick","disabled","useCountdown","limit","useState","workTime","breakTime","longBreakTime","timerState","setTimerState","cycleCount","setCycleCount","setActive","setLeftSec","timerObj","setTimerObj","useEffect","setTimeout","prev","clearTimeout","console","log","c","CountdownContainer","Countdown","useStyles","makeStyles","theme","root","margin","spacing","fontSize","StyledInputField","StyledTextField","TextField","UserInputComponent","handleInputWorkTime","inputWorkTime","handleInputBreakTime","inputBreakTime","handleInputLongBreakTime","inputLongBreakTime","handleInputCycleCount","inputCycleCount","inputValueSet","classes","noValidate","autoComplete","id","onChange","value","label","onSubmit","UserInputContainer","setInputWorkTime","setInputBreakTime","setInputLongBreakTime","setInputCycleCount","e","target","StyledTableCell","withStyles","head","backgroundColor","palette","common","black","color","white","borderRight","lineHeight","body","padding","TableCell","StyledTableRow","action","hover","TableRow","StyledTableContainer","TableContainer","createData","name","times_cycles","rows","table","maxWidth","InputTimeDesplay","component","Paper","Table","aria-label","TableHead","align","TableBody","map","row","key","scope","GlobalStyle","createGlobalStyle","reset","App","UserInput","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a989f32.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Styledheader = styled.header`\r\n  background-color: #282c34;\r\n  align-items: center;\r\n  font-size: 25px;\r\n  color: #fff;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Styledheader>\r\n      <p>Pomodoro Timer</p>\r\n    </Styledheader>\r\n  );\r\n};\r\n\r\nexport default Header;","//componentsは見た目を担当\r\nimport React from 'react';\r\nimport {secToMMSS} from '../lib/time';\r\nimport Button from '@material-ui/core/Button';\r\nimport styled from 'styled-components';\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//       margin: theme.spacing(1),\r\n//   },\r\n// }));\r\n\r\nconst StyledTimeDesplay = styled.div`\r\n  color: #282c34;\r\n  font-size: 100px;\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  &.MuiButton-root {\r\n    width: '130px';\r\n    font-size: 1.3rem;\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\n\r\nconst CountdownComponent = ({leftSec, handleStart, handleStop, handleReset, active}) => {\r\n  // const classes = useStyles();\r\n  // console.log(leftSec);\r\n  // console.log(handleStart);\r\n  return (\r\n    <>\r\n      <StyledTimeDesplay>{secToMMSS(leftSec)}</StyledTimeDesplay>\r\n      <div className=\"module-spacer\" />\r\n      <div>\r\n       <StyledButton variant=\"contained\" onClick={handleStart} disabled={active}>START</StyledButton>\r\n       <StyledButton variant=\"contained\" onClick={handleStop} disabled={!active}>STOP</StyledButton>\r\n       <StyledButton variant=\"contained\" onClick={handleReset} disabled={!active}>RESET</StyledButton>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CountdownComponent","  //残り時間の計算及び「分：秒」へ変換する関数\r\n  //これをsetする\r\n  export const secToMMSS = (sec) => {\r\n    let remainigTime = {};\r\n    remainigTime = {\r\n      restMin: String(Math.floor((sec / 60) % 60)).padStart(2, '0'),\r\n      restSec: String(Math.floor((sec) % 60)).padStart(2, '0')\r\n    };\r\n    return `${remainigTime.restMin}:${remainigTime.restSec}`\r\n  };\r\n  ","//containersはロジックを担当\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../App.css';\r\nimport CountdownComponent from '../components/Countdown';\r\n\r\nconst useCountdown = (limit) => {\r\n  const[workTime, setWorkTime] = useState(25);\r\n  const[breakTime, setBreakTime] = useState(0.3);\r\n  const[longBreakTime, setLongBreakTime] = useState(20);\r\n  const[timerState, setTimerState] = useState('work');\r\n  const[cycleCount, setCycleCount] = useState(1);\r\n  const[active, setActive] = useState(false);\r\n  let[leftSec, setLeftSec] = useState(workTime*60);\r\n  let[timerObj, setTimerObj] = useState('');\r\n\r\n  const handleSwitch = () => {\r\n    //3回目のworkが終了したらlongbreakに入る\r\n    //longbreakまでの作業時間\r\n    if( timerState === 'work' && cycleCount === 3 ) {\r\n      setLeftSec(longBreakTime*60);\r\n      setTimerState('longBreak');\r\n      setCycleCount(1);\r\n    } else if (timerState === 'work') {\r\n      setLeftSec(breakTime*60);\r\n      setTimerState('break');\r\n      console.log('handleSwitchのwork');\r\n    } else if ( timerState === 'break' ) {\r\n      setLeftSec(workTime*60);\r\n      setTimerState('work');\r\n      setCycleCount(c => c + 1);\r\n      console.log(cycleCount); \r\n    } \r\n  }\r\n\r\n  const handleStart = () => {\r\n    console.log('start click!')\r\n    setActive(true);\r\n  };\r\n\r\n  const handleStop = () => {\r\n    setActive(false);\r\n    clearTimeout(timerObj);\r\n    console.log('stop click')\r\n  };\r\n\r\n  const handleReset = () => {\r\n    switch (timerState) {\r\n      case \"work\": setLeftSec(workTime);\r\n        break;\r\n      case \"break\": setLeftSec(breakTime);\r\n        break;\r\n      case \"longBreak\": setLeftSec(longBreakTime);\r\n        break;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if( active && leftSec > 0 ) {\r\n      setTimerObj(\r\n        setTimeout(() => {\r\n          setLeftSec(prev => prev - 1);\r\n        }, 1000)\r\n      )\r\n    } else if ( active && leftSec <= 0 ) {\r\n      clearTimeout(timerObj);\r\n      console.log(leftSec);\r\n      console.log(timerState);\r\n      handleSwitch();\r\n    } else {\r\n      clearTimeout(timerObj);\r\n    }\r\n    return () => clearTimeout(timerObj);\r\n  },[active, leftSec])\r\n\r\n  return[[workTime, leftSec, active], [handleStart, handleStop, handleReset]];\r\n}\r\n\r\n\r\nconst CountdownContainer = () => {\r\n  const[[workTime, leftSec, active], [handleStart, handleStop, handleReset]] = useCountdown(25*60);\r\n  return (\r\n    <CountdownComponent\r\n      leftSec={leftSec}\r\n      active={active}\r\n      handleStart={handleStart}\r\n      handleStop={handleStop}\r\n      handleReset={handleReset}\r\n    />\r\n  );\r\n}\r\n\r\nexport default CountdownContainer;","//見た目担当\r\nimport React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport styled from 'styled-components';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      // width: '120px',\r\n      fontSize: '1.2rem',\r\n      // display: 'block',\r\n      // margin: '0 auto'\r\n    },\r\n  },\r\n}));\r\n\r\nconst StyledInputField = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`\r\n\r\nconst StyledTextField = styled(TextField)`\r\n  &.MuiFormControl-root{\r\n    width: 100px;\r\n    margin-right: 20px;\r\n    &.MuiInputLabel-formControl {\r\n      top: -10px;\r\n      text-align: left;\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  width: 100px;\r\n`;\r\n\r\nconst UserInputComponent = ({\r\n  handleInputWorkTime, inputWorkTime,\r\n  handleInputBreakTime, inputBreakTime,\r\n  handleInputLongBreakTime, inputLongBreakTime,\r\n  handleInputCycleCount, inputCycleCount,\r\n  inputValueSet\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <form className={classes.root} noValidate autoComplete=\"off\">\r\n      <StyledInputField>\r\n        <StyledTextField id=\"standard-basic\" \r\n          onChange={handleInputWorkTime} \r\n          value={inputWorkTime} \r\n          label=\"作業時間\"\r\n        />\r\n        <StyledTextField id=\"standard-basic\"\r\n          onChange={handleInputBreakTime} \r\n          value={inputBreakTime}\r\n          label=\"小休憩時間\"\r\n        />\r\n        <StyledTextField id=\"standard-basic\"\r\n          onChange={handleInputLongBreakTime} \r\n          value={inputLongBreakTime}\r\n          label=\"長休憩時間\"\r\n        />\r\n        <StyledTextField id=\"standard-basic\"\r\n          onChange={handleInputCycleCount} \r\n          value={inputCycleCount}\r\n          label=\"長休憩までの作業回数\"\r\n        />\r\n      </StyledInputField>\r\n      <StyledButton variant=\"contained\"\r\n        onSubmit={inputValueSet}\r\n      >OK</StyledButton>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UserInputComponent;","//ロジック担当:Viewではなくcomponentを返すcomponent\r\nimport React, {useState} from 'react';\r\nimport UserInputComponent from '../components/userInput';\r\n\r\n\r\nconst UserInputContainer = () => {\r\n  const[inputWorkTime, setInputWorkTime] = useState(25);\r\n  const[inputBreakTime, setInputBreakTime] = useState(5);\r\n  const[inputLongBreakTime, setInputLongBreakTime] = useState(20);\r\n  const[inputCycleCount, setInputCycleCount] = useState(4);\r\n\r\n\r\n\r\n  const handleInputWorkTime = (e) => {\r\n    setInputWorkTime(e.target.value);\r\n    console.log(e.target.value);\r\n  }\r\n\r\n  const handleInputBreakTime = (e) => {\r\n    setInputBreakTime(e.target.value);\r\n    console.log(e.target.value);\r\n  }\r\n\r\n  const handleInputLongBreakTime = (e) => {\r\n    setInputLongBreakTime(e.target.value);\r\n    console.log(e.target.value);\r\n  }\r\n  \r\n  const handleInputCycleCount = (e) => {\r\n    setInputCycleCount(e.target.value);\r\n    console.log(e.target.value);\r\n  }\r\n\r\n  const inputValueSet = (e) => {\r\n    \r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <UserInputComponent \r\n        handleInputWorkTime={handleInputWorkTime}\r\n        inputWorkTime={inputWorkTime}\r\n        handleInputBreakTime={handleInputBreakTime}\r\n        inputBreakTime={inputBreakTime}\r\n        handleInputLongBreakTime={handleInputLongBreakTime}\r\n        inputLongBreakTime={inputLongBreakTime}\r\n        handleInputCycleCount={handleInputCycleCount}\r\n        inputCycleCount={inputCycleCount}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserInputContainer;","//View担当：設定されている各時間を表示するcomponents\r\nimport React from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport styled from 'styled-components';\r\n\r\n//入力された値を受け取って表示するだけ\r\n//入力された値を保持(セット)しているのはUserInputContainer\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n    borderRight:'2px solid #ccc',\r\n    lineHeight: '1rem'\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n    borderRight:'2px solid #aaa',\r\n    lineHeight: '1rem'\r\n  },\r\n  root: {\r\n    padding: '15px',\r\n  }\r\n\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    }\r\n  },\r\n}))(TableRow);\r\n\r\nconst StyledTableContainer = styled(TableContainer)`\r\n    max-width: 350px;\r\n    margin: 0 auto;\r\n`;\r\n\r\nfunction createData(name, times_cycles) {\r\n  return { name, times_cycles };\r\n}\r\n\r\nconst rows = [\r\n  createData('作業時間', 25),\r\n  createData('休憩時間', 5),\r\n  createData('長休憩時間', 20),\r\n  createData('長休憩までの作業時間', 4)\r\n];\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    maxWidth: 350,\r\n    margin: '0 auto',\r\n  },\r\n});\r\n\r\nconst InputTimeDesplay = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <StyledTableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>設定</StyledTableCell>\r\n            <StyledTableCell align=\"right\">時間(分)&nbsp;/&nbsp;回数</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <StyledTableRow key={row.name}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">{row.times_cycles}</StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </StyledTableContainer>\r\n  );\r\n}\r\n\r\n\r\nexport default InputTimeDesplay;","import React from 'react';\nimport './App.css';\nimport { createGlobalStyle } from 'styled-components';\nimport reset from 'styled-reset-advanced';\nimport Header from './components/Header';\nimport CountdownContainer from './containers/Countdown';\nimport UserInputContainer from './containers/UserInput';\nimport InputTimeDesplay from './components/InputTimeDesplay';\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset}\n`;\n\n//InputTimeDesplayはcomponentから直接(ロジック切り出していない)\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Header />\n      <div className=\"module-spacer\" />\n      <CountdownContainer />\n      <div className=\"module-spacer\" />\n      <InputTimeDesplay />\n      <div className=\"module-spacer\" />\n      <UserInputContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}