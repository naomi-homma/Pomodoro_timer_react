{"version":3,"sources":["components/Header.jsx","components/Countdown.jsx","lib/time.js","containers/Countdown.tsx","components/userInput.tsx","containers/UserInput.tsx","components/InputTimeDisplay.jsx","components/DescriptionPomodoro.jsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Styledheader","styled","header","Header","StyledTimeDesplay","div","StyledButton","Button","StyledTypography","Typography","CountdownComponent","leftSec","timerState","worksCount","cycleCount","buttonState","handleStart","handleStop","handleReset","sec","remainigTime","restMin","String","Math","floor","padStart","restSec","secToMMSS","variant","className","onClick","disabled","start","stop","reset","CountdownContainer","props","useState","setTimerState","running","setRunning","setButtonState","workTime","setLeftSec","setWorksCount","timerObj","setTimerObj","audio","Audio","useEffect","window","setTimeout","prev","clearTimeout","longBreakTime","breakTime","src","playPromise","play","console","log","undefined","then","_","catch","error","c","handleSwitch","Countdown","useStyles","makeStyles","theme","root","margin","spacing","fontSize","StyledInputField","StyledTextField","TextField","UserInputComponent","classes","noValidate","autoComplete","id","onChange","handleInputWorkTime","value","inputWorkTime","label","type","handleInputBreakTime","inputBreakTime","handleInputLongBreakTime","inputLongBreakTime","handleInputCycleCount","inputCycleCount","callInputValueSet","UserInputContainer","setInputWorkTime","setInputBreakTime","setInputLongBreakTime","setInputCycleCount","e","Number","target","preventDefault","inputValueSet","StyledTableCell","withStyles","head","backgroundColor","palette","common","black","color","white","borderRight","lineHeight","body","padding","TableCell","StyledTableRow","action","hover","TableRow","StyledTableContainer","TableContainer","table","maxWidth","InputTimeDesplay","displayWorkTime","setDisplayWorkTime","displayBreakTime","setDisplayBreakTime","displayLongBreakTime","setDisplayLongBreakTime","displayCycleCount","setDisplayCycleCount","createData","name","times_cycles","rows","component","Paper","Table","aria-label","TableHead","align","TableBody","map","row","key","scope","createMuiTheme","typography","h1","body1","fontWeight","createStyles","descriptionFeild","width","border","borderRadius","descriptionText","textAlign","DescriptionPomodoro","ThemeProvider","GlobalStyle","createGlobalStyle","App","setWorkTime","setBreakTime","setLongBreakTime","setCycleCount","InputTimeDisplay","UserInput","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7ea6fbb5.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Styledheader = styled.header`\r\n  background-color: #282c34;\r\n  align-items: center;\r\n  font-size: 25px;\r\n  color: #fff;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Styledheader>\r\n      <p>Pomodoro Timer</p>\r\n    </Styledheader>\r\n  );\r\n};\r\n\r\nexport default Header;","//componentsは見た目を担当\r\nimport React from 'react';\r\nimport {secToMMSS} from '../lib/time';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledTimeDesplay = styled.div`\r\n  color: #282c34;\r\n  font-size: 100px;\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  &.MuiButton-root {\r\n    width: '130px';\r\n    font-size: 1.3rem;\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nconst StyledTypography = styled(Typography)`\r\n  &.MuiTypography-body1 {\r\n    font-size: 2.5rem;\r\n  }\r\n  &.MuiTypography-body2 {\r\n    font-size: 1.5rem;\r\n  }\r\n`\r\n//timerとbuttonはcomponentで分けたい気持ち\r\nconst CountdownComponent = ({leftSec, timerState, worksCount, cycleCount, buttonState, handleStart, handleStop, handleReset}) => {\r\n  return (\r\n    <>\r\n      <StyledTimeDesplay>{secToMMSS(leftSec)}</StyledTimeDesplay>\r\n      <StyledTypography variant=\"body1\">\r\n        {timerState}\r\n      </StyledTypography>\r\n      <StyledTypography variant=\"body2\">\r\n        {worksCount}/{cycleCount}\r\n      </StyledTypography>\r\n      <div className=\"module_spacer_medium\" />\r\n      <div>\r\n       <StyledButton variant=\"contained\" onClick={handleStart} disabled={buttonState.start}>START</StyledButton>\r\n       <StyledButton variant=\"contained\" onClick={handleStop} disabled={buttonState.stop}>STOP</StyledButton>\r\n       <StyledButton variant=\"contained\" onClick={handleReset} disabled={buttonState.reset}>RESET</StyledButton>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CountdownComponent","  //残り時間の計算及び「分：秒」へ変換する関数\r\n  //これをsetする\r\n  export const secToMMSS = (sec) => {\r\n    let remainigTime = {};\r\n    remainigTime = {\r\n      restMin: String(Math.floor((sec / 60) % 60)).padStart(2, '0'),\r\n      restSec: String(Math.floor((sec) % 60)).padStart(2, '0')\r\n    };\r\n    return `${remainigTime.restMin}:${remainigTime.restSec}`\r\n  };\r\n  ","//containersはロジックを担当\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../App.css';\r\nimport CountdownComponent from '../components/Countdown';\r\n\r\ntype Props = {\r\n  workTime: number,\r\n  breakTime: number,\r\n  longBreakTime: number,\r\n  cycleCount: number,\r\n}\r\n\r\ntype ButtonStateType = {\r\n  start: boolean,\r\n  stop: boolean,\r\n  reset: boolean\r\n}\r\n\r\nconst CountdownContainer = (props: Props) => {\r\n  const[timerState, setTimerState] = useState<string>('work');\r\n  const[running, setRunning] = useState<boolean>(false);\r\n  const[buttonState, setButtonState] = useState<ButtonStateType>({start: false, stop: true, reset: true})\r\n  let[leftSec, setLeftSec] = useState<number>(props.workTime*60);\r\n  let[worksCount, setWorksCount] = useState<number>(1);\r\n  let[timerObj, setTimerObj] = useState<number>();\r\n\r\n  // 効果音再生\r\n  const audio = new Audio();\r\n\r\n  const handleSwitch = () => {\r\n    if( timerState === 'work' && worksCount === props.cycleCount ) {\r\n      setLeftSec(props.longBreakTime*60);\r\n      setTimerState('longBreak');\r\n    } else if (timerState === 'work') {\r\n      setLeftSec(props.breakTime*60);\r\n      setTimerState('break');\r\n      audio.src = \"https://naomi-homma.github.io/Pomodoro_timer_react/assets/audio/hatoclock.mp3#t=0,3.5\";\r\n      const playPromise = audio.play();\r\n      console.log('ここまで！')\r\n        if(playPromise !== undefined) {\r\n          playPromise.then(_ => {\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n          });\r\n        }\r\n    } else if ( timerState === 'break' ) {\r\n      setLeftSec(props.workTime*60);\r\n      setTimerState('work');\r\n      setWorksCount(c => c + 1);\r\n    } else if ( timerState === 'longBreak' ) {\r\n      setLeftSec(props.workTime*60);\r\n      setTimerState('work');\r\n      setWorksCount(1);\r\n    } \r\n  }\r\n\r\n  const handleStart = () => {\r\n    setRunning(true);\r\n    setButtonState({start: true, stop: false, reset: true});\r\n  };\r\n\r\n  const handleStop = () => {\r\n    setRunning(false);\r\n    setButtonState({start: false, stop: true, reset: false});\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setButtonState({start: false, stop: true, reset: true});\r\n    switch (timerState) {\r\n      case \"work\": setLeftSec(props.workTime*60);\r\n        break;\r\n      case \"break\": setLeftSec(props.breakTime*60);\r\n        break;\r\n      case \"longBreak\": setLeftSec(props.longBreakTime*60);\r\n        break;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if( running && leftSec > 0 ) {\r\n      setTimerObj(\r\n        //window:明示的にブラウザのsetTimeout()を使うことを指示する\r\n        window.setTimeout(() => {\r\n          setLeftSec(prev => prev - 1);\r\n        }, 1000)\r\n      )\r\n    } else if ( running && leftSec <= 0 ) {\r\n      clearTimeout(timerObj);\r\n      handleSwitch();\r\n    } else {\r\n      clearTimeout(timerObj);\r\n    }\r\n    return () => clearTimeout(timerObj);\r\n  },[running, leftSec])\r\n\r\n  useEffect(() => {\r\n    setLeftSec(props.workTime*60);\r\n  }, [props.workTime])\r\n\r\n  return (\r\n    <CountdownComponent\r\n      leftSec={leftSec}\r\n      timerState={timerState}\r\n      worksCount={worksCount}\r\n      cycleCount={props.cycleCount}\r\n      buttonState={buttonState}\r\n      handleStart={handleStart}\r\n      handleStop={handleStop}\r\n      handleReset={handleReset}\r\n    />\r\n  );\r\n}\r\n\r\nexport default CountdownContainer;","//見た目担当\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport styled from 'styled-components';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      fontSize: '1.2rem',\r\n    },\r\n  },\r\n}));\r\n\r\nconst StyledTypography = styled(Typography)`\r\n  &.MuiTypography-body1 {\r\n    font-size: 1rem;\r\n  }\r\n`\r\n\r\nconst StyledInputField = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`\r\n\r\nconst StyledTextField = styled(TextField)`\r\n  &.MuiFormControl-root{\r\n    width: 100px;\r\n    margin-right: 20px;\r\n    &.MuiInputLabel-formControl {\r\n      top: -10px;\r\n      text-align: left;\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  width: 100px;\r\n`;\r\n\r\ntype Props = {\r\n  handleInputWorkTime: (e: React.ChangeEvent<HTMLInputElement>) => void, \r\n  inputWorkTime: number,\r\n  handleInputBreakTime: (e: React.ChangeEvent<HTMLInputElement>) => void, \r\n  inputBreakTime: number,\r\n  handleInputLongBreakTime: (e: React.ChangeEvent<HTMLInputElement>) => void, \r\n  inputLongBreakTime: number,\r\n  handleInputCycleCount: (e: React.ChangeEvent<HTMLInputElement>) => void, \r\n  inputCycleCount: number,\r\n  callInputValueSet: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\r\n};\r\n\r\nconst UserInputComponent = (props: Props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <StyledTypography variant=\"body1\">\r\n        ■お好きな時間・回数を設定できます■\r\n      </StyledTypography>\r\n      <div className=\"module_spacer_small\" />\r\n      <form className={classes.root} noValidate autoComplete=\"off\">\r\n        <StyledInputField>\r\n          <StyledTextField id=\"standard-basic\" \r\n            onChange={props.handleInputWorkTime} \r\n            value={props.inputWorkTime} \r\n            label=\"作業時間\"\r\n            type=\"number\"\r\n          />\r\n          <StyledTextField id=\"standard-basic\"\r\n            onChange={props.handleInputBreakTime} \r\n            value={props.inputBreakTime}\r\n            label=\"小休憩時間\"\r\n            type=\"number\"\r\n          />\r\n          <StyledTextField id=\"standard-basic\"\r\n            onChange={props.handleInputLongBreakTime} \r\n            value={props.inputLongBreakTime}\r\n            label=\"長休憩時間\"\r\n            type=\"number\"\r\n          />\r\n          <StyledTextField id=\"standard-basic\"\r\n            onChange={props.handleInputCycleCount} \r\n            value={props.inputCycleCount}\r\n            label=\"長休憩までの作業回数\"\r\n            type=\"number\"\r\n          />\r\n        </StyledInputField>\r\n        <StyledButton variant=\"contained\"\r\n          type=\"submit\"\r\n          onClick={props.callInputValueSet}\r\n        >OK</StyledButton>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserInputComponent;","//ロジック担当:Viewではなくcomponentを返すcomponent\r\nimport React, {useState} from 'react';\r\nimport UserInputComponent from '../components/userInput';\r\n\r\ntype Props = {\r\n  inputValueSet: (inputWorkTime: number, inputBreakTime: number, inputLongBreakTime: number, inputCycleCount: number) => void,\r\n  workTime: number,\r\n  breakTime: number,\r\n  longBreakTime: number,\r\n  cycleCount: number,\r\n};\r\n\r\nconst UserInputContainer = (props: Props) => {\r\n  const[inputWorkTime, setInputWorkTime] = useState<number>(props.workTime);\r\n  const[inputBreakTime, setInputBreakTime] = useState<number>(props.breakTime);\r\n  const[inputLongBreakTime, setInputLongBreakTime] = useState<number>(props.longBreakTime);\r\n  const[inputCycleCount, setInputCycleCount] = useState<number>(props.cycleCount);\r\n\r\n  const handleInputWorkTime = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputWorkTime(Number(e.target.value));\r\n  }\r\n\r\n  const handleInputBreakTime = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputBreakTime(Number(e.target.value));\r\n  }\r\n\r\n  const handleInputLongBreakTime = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputLongBreakTime(Number(e.target.value));\r\n  }\r\n  \r\n  const handleInputCycleCount = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputCycleCount(Number(e.target.value));\r\n  }\r\n\r\n  const callInputValueSet = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    e.preventDefault();\r\n    props.inputValueSet(inputWorkTime, inputBreakTime, inputLongBreakTime, inputCycleCount);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <UserInputComponent \r\n        handleInputWorkTime={handleInputWorkTime}\r\n        inputWorkTime={inputWorkTime}\r\n        handleInputBreakTime={handleInputBreakTime}\r\n        inputBreakTime={inputBreakTime}\r\n        handleInputLongBreakTime={handleInputLongBreakTime}\r\n        inputLongBreakTime={inputLongBreakTime}\r\n        handleInputCycleCount={handleInputCycleCount}\r\n        inputCycleCount={inputCycleCount}\r\n        callInputValueSet={callInputValueSet}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserInputContainer;","//View担当：設定されている各時間を表示するcomponents\r\nimport React, {useState, useEffect} from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport styled from 'styled-components';\r\n\r\n//入力された値を受け取って表示するだけ\r\n//入力された値を保持(セット)しているのはUserInputContainer\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    fontSize: '1rem',\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n    borderRight:'2px solid #ccc',\r\n    lineHeight: '1rem'\r\n  },\r\n  body: {\r\n    fontSize: '1rem',\r\n    borderRight:'2px solid #aaa',\r\n    lineHeight: '1rem'\r\n  },\r\n  root: {\r\n    padding: '15px',\r\n  }\r\n\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    }\r\n  },\r\n}))(TableRow);\r\n\r\nconst StyledTableContainer = styled(TableContainer)`\r\n    max-width: 350px;\r\n    margin: 0 auto;\r\n`;\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    maxWidth: 350,\r\n    margin: '0 auto',\r\n  },\r\n});\r\n\r\nconst InputTimeDesplay = (props) => {\r\n  const[displayWorkTime, setDisplayWorkTime] = useState(props.workTime);\r\n  const[displayBreakTime, setDisplayBreakTime] = useState(props.breakTime);\r\n  const[displayLongBreakTime, setDisplayLongBreakTime] = useState(props.longBreakTime);\r\n  const[displayCycleCount, setDisplayCycleCount] = useState(props.cycleCount);\r\n  const classes = useStyles();\r\n\r\n  console.log(props.cycleCount)\r\nfunction createData(name, times_cycles) {\r\n  return { name, times_cycles };\r\n}\r\n\r\nconst rows = [\r\n  createData('作業時間', displayWorkTime),\r\n  createData('休憩時間', displayBreakTime),\r\n  createData('長休憩時間', displayLongBreakTime),\r\n  createData('長休憩までの作業回数', displayCycleCount)\r\n];\r\n\r\nuseEffect(() => {\r\n  setDisplayWorkTime(props.workTime);\r\n  setDisplayBreakTime(props.breakTime);\r\n  setDisplayLongBreakTime(props.longBreakTime);\r\n  setDisplayCycleCount(props.cycleCount);\r\n}, [props.workTime, props.breakTime, props.longBreakTime, props.cycleCount]);\r\n\r\n  return (\r\n    <StyledTableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>設定</StyledTableCell>\r\n            <StyledTableCell align=\"right\">時間(分)&nbsp;/&nbsp;回数</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <StyledTableRow key={row.name}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">{row.times_cycles}</StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </StyledTableContainer>\r\n  );\r\n}\r\n\r\nexport default InputTimeDesplay;","import React from 'react';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport {makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    h1: {\r\n      fontSize: 23,\r\n    },\r\n    body1: {\r\n      fontWeight: 500,\r\n      fontSize: 15,\r\n    },\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n      descriptionFeild: {\r\n        width: 400,\r\n        margin: \"0 auto\",\r\n        border: \"solid 2px #bbb\",\r\n        borderRadius: 3,\r\n        padding: 15,\r\n      },\r\n      descriptionText: {\r\n        textAlign: \"left\"\r\n      }\r\n    }),\r\n);\r\n\r\nconst DescriptionPomodoro = () => {\r\n  const classes = useStyles();\r\n  return(\r\n    <div className={classes.descriptionFeild}>\r\n      <ThemeProvider theme={theme}>\r\n        <Typography variant=\"h1\">Pomodoro Timerについて</Typography>\r\n        <div className=\"module_spacer_medium\" />\r\n        <Typography className={classes.descriptionText}>\r\n        ポモドーロタイマーは、ポモドーロテクニックを実践するためのアイテム。ポモドーロ・テクニックとは、1980年代にイタリア人のフランチェスコ・シリロによって考案された時間管理術一つ。25分の作業と5分の休憩を繰り返し、途中に長い休息を取るサイクルを回す。集中力を高め、効率的に仕事を進めるテクニック。\r\n        </Typography>\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DescriptionPomodoro;","import React, {useState}from 'react';\nimport './App.css';\nimport { createGlobalStyle } from 'styled-components';\nimport reset from 'styled-reset-advanced';\nimport Header from './components/Header';\nimport CountdownContainer from './containers/Countdown';\nimport UserInputContainer from './containers/UserInput';\nimport InputTimeDisplay from './components/InputTimeDisplay';\nimport DescriptionPomodoro from './components/DescriptionPomodoro';\n\n//reset css\nconst GlobalStyle = createGlobalStyle`\n  ${reset}\n`;\n\n//InputTimeDesplayはcomponentから直接(ロジック切り出していない)\nconst App = () => {\n  const[workTime, setWorkTime] = useState<number>(25);\n  const[breakTime, setBreakTime] = useState<number>(5);\n  const[longBreakTime, setLongBreakTime] = useState<number>(20);\n  const[cycleCount, setCycleCount] = useState<number>(4);\n  \n  const inputValueSet = (inputWorkTime: number, inputBreakTime: number, inputLongBreakTime: number, inputCycleCount: number) => {\n    setWorkTime(inputWorkTime);\n    setBreakTime(inputBreakTime);\n    setLongBreakTime(inputLongBreakTime);\n    setCycleCount(inputCycleCount);\n  }\n\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Header />\n      <div className=\"module_spacer_medium\" />\n      <CountdownContainer\n        workTime={workTime}\n        breakTime={breakTime}\n        longBreakTime={longBreakTime}\n        cycleCount={cycleCount}\n      />\n      <div className=\"module_spacer_medium\" />\n      <InputTimeDisplay\n        workTime={workTime}\n        breakTime={breakTime}\n        longBreakTime={longBreakTime}\n        cycleCount={cycleCount}\n      />\n      <div className=\"module_spacer_medium\" />\n      <UserInputContainer \n        inputValueSet={inputValueSet}\n        workTime={workTime}\n        breakTime={breakTime}\n        longBreakTime={longBreakTime}\n        cycleCount={cycleCount}\n      />\n      <div className=\"module_spacer_medium\" />\n      <div className=\"module_spacer_medium\" />\n      <DescriptionPomodoro />\n      <div className=\"module_spacer_medium\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}